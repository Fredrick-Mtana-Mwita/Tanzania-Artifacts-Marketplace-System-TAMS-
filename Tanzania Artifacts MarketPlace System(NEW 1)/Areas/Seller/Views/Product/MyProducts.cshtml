@using Tanzania_Artifacts_MarketPlace_System_NEW_1_.Areas.Seller.SellerViewModel
@model List<Product>
@using System.Web

@{
    ViewData["Title"] = "My Products";
}

<div class="container py-4">
    <h2 class="mb-4 fw-bold text-center">My Products</h2>

    <table class="table table-bordered table-hover align-middle" id="productsTable">
        <thead class="table-light">
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model)
            {
                var encodedName = HttpUtility.JavaScriptStringEncode(product.Name ?? "");
                var encodedDesc = HttpUtility.JavaScriptStringEncode(product.Description ?? "");
                <tr data-product-id="@product.Id">
                    <td>
                        <img src="@Url.Content("~/" + product.ProductImage)" alt="@product.Name" width="60" height="60" class="img-thumbnail" />
                    </td>
                    <td>@product.Name</td>
                    <td>TSh @product.Price.ToString("N0")</td>
                    <td>
                        <form class="stock-form d-flex" data-id="@product.Id">
                            <input type="number" name="stockQuantity" value="@product.StockQuantity" class="form-control me-2" style="width: 100px;" min="0" required />
                            <button type="submit" class="btn btn-sm btn-primary">Update</button>
                        </form>
                    </td>
                    <td>
                        @if (product.IsApproved)
                        {
                            <span class="badge bg-success">Approved</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Pending</span>
                        }
                    </td>
                    <td>
                        <button type="button"
                                class="btn btn-sm btn-outline-secondary"
                                onclick="openEditModal(@product.Id, '@encodedName', '@encodedDesc', @product.Price)">
                            Edit
                        </button>
                        <button type="button"
                                class="btn btn-sm btn-outline-danger ms-1"
                                onclick="confirmDelete('@Url.Action("Delete", "Product", new { id = product.Id })')">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editForm" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="ProductId" id="editProductId" />
                    <div class="mb-3">
                        <label for="editName" class="form-label">Product Name</label>
                        <input type="text" name="ProductName" id="editName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea name="Description" id="editDescription" class="form-control" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editPrice" class="form-label">Price</label>
                        <input type="number" name="Price" id="editPrice" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editImage" class="form-label">Image</label>
                        <input type="file" name="Image" id="editImage" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" formaction="/Product/Edit" class="btn btn-primary">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function openEditModal(id, name, description, price) {
            document.getElementById('editProductId').value = id;
            document.getElementById('editName').value = name;
            document.getElementById('editDescription').value = description;
            document.getElementById('editPrice').value = price;
            new bootstrap.Modal(document.getElementById('editModal')).show();
        }

        function confirmDelete(deleteUrl) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'This product will be permanently deleted!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = deleteUrl;
                }
            });
        }

        document.querySelectorAll(".stock-form").forEach(form => {
            form.addEventListener("submit", function (e) {
                e.preventDefault();
                const productId = this.getAttribute("data-id");
                const stockQuantity = this.querySelector("[name='stockQuantity']").value;

                fetch(`/SellerDashboard/UpdateStock`, {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector("input[name='__RequestVerificationToken']")?.value
                    },
                    body: `productId=${productId}&stockQuantity=${stockQuantity}`
                }).then(res => {
                    if (res.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Updated!',
                            text: 'Stock quantity updated successfully.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to update stock.',
                        });
                    }
                }).catch(() => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                    });
                });
            });
        });

        // Handle TempData messages
        @if (TempData["Success"] != null)
        {
            var successMessage = HttpUtility.JavaScriptStringEncode(TempData["Success"]?.ToString() ?? "");
            @:showAlert('success', 'Success', '@successMessage');
        }

        @if (TempData["Error"] != null)
        {
            var errorMessage = HttpUtility.JavaScriptStringEncode(TempData["Error"]?.ToString() ?? "");
            @:showAlert('error', 'Error', '@errorMessage');
        }

        function showAlert(icon, title, text) {
            Swal.fire({
                icon: icon,
                title: title,
                text: text
            });
        }
    </script>
}